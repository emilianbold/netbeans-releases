/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2011 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2011 Sun Microsystems, Inc.
 */
package org.netbeans.modules.coherence.server.ui;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.netbeans.modules.coherence.server.CoherenceModuleProperties;
import org.netbeans.modules.coherence.server.CoherenceProperties;
import org.netbeans.modules.coherence.server.util.ClasspathPropertyUtils;
import org.netbeans.modules.coherence.server.util.ClasspathTable;

/**
 *
 */
public class CustomizerClasspath extends javax.swing.JPanel implements ChangeListener {

    private CoherenceProperties coherenceProperties;

    /**
     * Creates new form CustomizerClasspath.
     */
    public CustomizerClasspath(CoherenceProperties coherenceProperties) {
        this.coherenceProperties = coherenceProperties;

        initComponents();

        getTable().refreshClasspathEntries(coherenceProperties.getServerRoot()); //NOI18N
        getTable().setSelectedEntries(getSelectedServerLibraries());
        updateClasspathTextArea();

        getTable().addChangeListener(this);
    }

    private ClasspathTable getTable() {
        return (ClasspathTable) serverLibrariesTable;
    }

    private ClasspathTable.TableModel getTableModel() {
        return ((ClasspathTable) serverLibrariesTable).getTableModel();
    }

    private List<String> getSelectedServerLibraries() {
        List<String> selected = new ArrayList<String>();
        String classpath = coherenceProperties.getClasspath();
        String[] classpathArray = ClasspathPropertyUtils.classpathFromStringToArray(classpath);
        for (String cpEntry : classpathArray) {
            if (ClasspathPropertyUtils.isCoherenceServerJar(cpEntry)) {
                selected.add(cpEntry);
            }
        }
        return selected;
    }

    public final void updateClasspathTextArea() {
        String classpath = coherenceProperties.getClasspath();
        classpath = classpath.replaceAll(CoherenceModuleProperties.CLASSPATH_SEPARATOR, File.pathSeparator);
        serverClasspathTextArea.setText(classpath);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        serverLibrariesTable = new ClasspathTable();
        serverLibrariesLabel = new javax.swing.JLabel();
        serverClasspathLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        serverClasspathTextArea = new javax.swing.JTextArea();

        setName(org.openide.util.NbBundle.getMessage(CustomizerClasspath.class, "CustomizerClasspath.name")); // NOI18N

        serverLibrariesTable.setModel(getTableModel());
        serverLibrariesTable.setFillsViewportHeight(true);
        serverLibrariesTable.setName(org.openide.util.NbBundle.getMessage(CustomizerClasspath.class, "CustomizerClasspath.serverLibrariesTable.name")); // NOI18N
        serverLibrariesTable.setPreferredSize(new java.awt.Dimension(300, 70));
        jScrollPane1.setViewportView(serverLibrariesTable);

        serverLibrariesLabel.setText(org.openide.util.NbBundle.getMessage(CustomizerClasspath.class, "CustomizerClasspath.serverLibrariesLabel.text")); // NOI18N

        serverClasspathLabel.setText(org.openide.util.NbBundle.getMessage(CustomizerClasspath.class, "CustomizerClasspath.serverClasspathLabel.text")); // NOI18N

        serverClasspathTextArea.setColumns(20);
        serverClasspathTextArea.setEditable(false);
        serverClasspathTextArea.setLineWrap(true);
        serverClasspathTextArea.setRows(5);
        jScrollPane2.setViewportView(serverClasspathTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(serverLibrariesLabel)
                    .addComponent(serverClasspathLabel)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(serverLibrariesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serverClasspathLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel serverClasspathLabel;
    private javax.swing.JTextArea serverClasspathTextArea;
    private javax.swing.JLabel serverLibrariesLabel;
    private javax.swing.JTable serverLibrariesTable;
    // End of variables declaration//GEN-END:variables

    @Override
    public void stateChanged(ChangeEvent e) {
        String cp = ClasspathPropertyUtils.getUpdatedClasspath(coherenceProperties.getClasspath(), null, getCoreJars());
        coherenceProperties.setClasspath(cp);
        updateClasspathTextArea();
    }

    private String[] getCoreJars() {
        List<String> cp = new ArrayList<String>();
        for (int i = 0; i < serverLibrariesTable.getRowCount(); i++) {
            ClasspathTable.TableModelItem item = getTableModel().getItem(i);
            if (item.getSelected()) {
                cp.add(ClasspathPropertyUtils.getAbsolutePath(coherenceProperties.getServerRoot(), item.getName()));
            }
        }
        return cp.toArray(new String[cp.size()]);
    }
}
