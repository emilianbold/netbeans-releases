/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2011 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2011 Sun Microsystems, Inc.
 */
package org.netbeans.modules.coherence.server.actions.ui;

import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.modules.coherence.server.CoherenceInstanceProvider;
import org.openide.NotificationLineSupport;
import org.openide.util.NbBundle.Messages;

/**
 *
 */
public class CloneServerPanel extends javax.swing.JPanel {

    public static final String IS_VALID = "CloneServerPanel_isValid"; //NOI18N
    private static final String CLONED_SERVER_SUFFIX = "Clone"; //NOI18N
    private NotificationLineSupport lineSupport;
    private final String originalName;

    /**
     * Creates new form CloneServerPanel.
     */
    public CloneServerPanel(String originalName) {
        this.originalName = originalName;

        initComponents();
        initDefaults();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newServerNameLabel = new javax.swing.JLabel();
        newServerNameTextField = new javax.swing.JTextField();

        newServerNameLabel.setText(org.openide.util.NbBundle.getMessage(CloneServerPanel.class, "CloneServerPanel.newServerNameLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newServerNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newServerNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newServerNameLabel)
                    .addComponent(newServerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel newServerNameLabel;
    private javax.swing.JTextField newServerNameTextField;
    // End of variables declaration//GEN-END:variables

    public void setNotificationLine(NotificationLineSupport statusLine) {
        lineSupport = statusLine;
    }

    private void initDefaults() {
        newServerNameTextField.setText(getUniqueName(originalName));
        newServerNameTextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                checkValidity();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                checkValidity();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                checkValidity();
            }
        });
    }

    @Messages({
        "server.name.is.empty=Server name cannot be empty.",
        "server.name.already.exists=Entered name of Coherence server already exists. Enter an unique one."
    })
    private void checkValidity() {
        if (lineSupport != null) {
            lineSupport.clearMessages();

            if (getNewServerName().isEmpty()) {
                lineSupport.setErrorMessage(Bundle.server_name_is_empty());
            }

            if (!CoherenceInstanceProvider.isUniqueDisplayNameAcrossInstances(getNewServerName())) {
                lineSupport.setErrorMessage(Bundle.server_name_already_exists());
            }


            if (lineSupport.getErrorMessage() == null) {
                firePropertyChange(IS_VALID, false, true);
            } else {
                firePropertyChange(IS_VALID, true, false);
            }
        }
    }

    public String getNewServerName() {
        return newServerNameTextField.getText().trim();
    }

    protected static String getUniqueName(String serverName) {
        StringBuilder sb = new StringBuilder(serverName);
        if (!serverName.contains(CLONED_SERVER_SUFFIX)) {
            sb.append(" ").append(CLONED_SERVER_SUFFIX).append("(1)"); //NOI18N
        } else if (serverName.endsWith(CLONED_SERVER_SUFFIX)) {
            sb.append("(2)"); //NOI18N
        }

        return getUniqueAcrossInstances(sb.toString());
    }

    private static String getUniqueAcrossInstances(String serverName) {
        if (!CoherenceInstanceProvider.isUniqueDisplayNameAcrossInstances(serverName)) {
            StringBuilder sb = new StringBuilder(serverName);
            int lastLBracket = serverName.lastIndexOf("("); //NOI18N
            int lastRBracket = serverName.lastIndexOf(")"); //NOI18N
            int number = Integer.parseInt(serverName.substring(lastLBracket + 1, lastRBracket));
            sb.replace(lastLBracket + 1, lastRBracket, String.valueOf(number + 1));
            return getUniqueAcrossInstances(sb.toString());
        }
        return serverName;
    }
}
