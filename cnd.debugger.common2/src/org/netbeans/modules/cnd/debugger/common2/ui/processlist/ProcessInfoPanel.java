/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 2016 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2016 Sun Microsystems, Inc.
 */

package org.netbeans.modules.cnd.debugger.common2.ui.processlist;

import java.util.Collection;
import javax.swing.SwingUtilities;
import org.netbeans.modules.cnd.debugger.common2.debugger.processlist.api.ProcessInfo;
import org.netbeans.modules.cnd.debugger.common2.debugger.processlist.api.ProcessInfoDescriptor;
import org.openide.util.Lookup;
import org.openide.util.Lookup.Result;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle;

/**
 *
 */
public class ProcessInfoPanel extends javax.swing.JPanel implements LookupListener {

    private Result<ProcessInfo> lookupResult = null;

    /** Creates new form ProcessInfoPanel */
    public ProcessInfoPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        commandLine = new javax.swing.JTextArea();

        jLabel1.setText(org.openide.util.NbBundle.getMessage(ProcessInfoPanel.class, "ProcessInfoPanel.jLabel1.text")); // NOI18N

        commandLine.setColumns(20);
        commandLine.setEditable(false);
        commandLine.setLineWrap(true);
        commandLine.setRows(5);
        commandLine.setWrapStyleWord(true);
        commandLine.setOpaque(false);
        jScrollPane1.setViewportView(commandLine);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addContainerGap(327, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1))
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void addNotify() {
        super.addNotify();
        Lookup.Provider provider = (Lookup.Provider) SwingUtilities.getAncestorOfClass(Lookup.Provider.class, this);
        if (provider == null) {
            return;
        }
        Lookup lookup = provider.getLookup();
        if (lookup == null) {
            return;
        }
        lookupResult = lookup.lookupResult(ProcessInfo.class);
        if (lookupResult != null) {
            lookupResult.addLookupListener(this);
            lookupResult.allItems();
        }
    }

    @Override
    public void removeNotify() {
        if (lookupResult != null) {
            lookupResult.removeLookupListener(this);
        }
        commandLine.setText(""); // NOI18N
        super.removeNotify();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea commandLine;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void resultChanged(LookupEvent ev) {
        Collection<? extends ProcessInfo> data = lookupResult.allInstances();

        if (!data.isEmpty()) {
            ProcessInfo info = data.iterator().next();

            if (info != null) {
                commandLine.setText(info.get(ProcessInfoDescriptor.COMMAND_COLUMN_ID, String.class));
            } else {
                commandLine.setText(NbBundle.getMessage(ProcessInfoPanel.class, "ProcessInfoPanel.commandLine_N_A.text")); // NOI18N
            }
        } else {
            commandLine.setText(""); // NOI18N
        }
    }
}
