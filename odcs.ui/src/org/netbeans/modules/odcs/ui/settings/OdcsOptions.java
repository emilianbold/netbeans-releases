/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2012 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2012 Sun Microsystems, Inc.
 */
package org.netbeans.modules.odcs.ui.settings;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeSupport;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.modules.team.commons.ColorManager;
import org.netbeans.spi.options.OptionsPanelController;
import org.openide.util.NbBundle;

/**
 *
 * 
 */
public class OdcsOptions extends javax.swing.JPanel implements DocumentListener {

    PropertyChangeSupport support = new PropertyChangeSupport(this);
    private boolean dataValid;

    /**
     * Creates new form OdcsOptions
     */
    public OdcsOptions() {
        initComponents();
        lblError.setForeground(ColorManager.getDefault().getErrorColor());
        lblError.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        cbSync = new javax.swing.JCheckBox();
        txtSync = new javax.swing.JTextField();
        lblError = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, NbBundle.getMessage(OdcsOptions.class, "OdcsOptions.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(cbSync, NbBundle.getMessage(OdcsOptions.class, "OdcsOptions.cbSync.text")); // NOI18N
        cbSync.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSyncActionPerformed(evt);
            }
        });

        txtSync.setMinimumSize(new java.awt.Dimension(30, 20));
        txtSync.setPreferredSize(new java.awt.Dimension(40, 20));

        lblError.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/odcs/ui/resources/error.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(cbSync)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSync, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblError)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSync)
                    .addComponent(txtSync, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblError)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbSyncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSyncActionPerformed
        txtSync.setEnabled(cbSync.isSelected());
        validate(true);
    }//GEN-LAST:event_cbSyncActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbSync;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblError;
    private javax.swing.JTextField txtSync;
    // End of variables declaration//GEN-END:variables

    void update() {
        txtSync.getDocument().removeDocumentListener(this);
        loadSettings();
        txtSync.getDocument().addDocumentListener(this);
        validate(false);
    }

    void applyChanges() {
        final OdcsSettings settings = OdcsSettings.getInstance();
        boolean autoSync = cbSync.isSelected();
        settings.setAutoSync(autoSync, false);
        settings.setAutoSyncValue(Integer.parseInt(txtSync.getText().trim()), true);
    }

    boolean isDataValid() {
        validate(false);
        return dataValid;
    }

    boolean isChanged() {
        final OdcsSettings settings = OdcsSettings.getInstance();
        return cbSync.isSelected() != settings.isAutoSync()
                || !txtSync.getText().trim().equals(settings.getAutoSyncValue() + "");
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        validate(true);
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        validate(true);
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        validate(true);
    }

    private void validate(boolean fireEvents) {
        boolean oldValid = dataValid;
        lblError.setVisible(false);
        lblError.setText("");                                           // NOI18N

        String sync = txtSync.getText().trim();

        dataValid = isValidNumberValue(sync) || !cbSync.isSelected();
        lblError.setVisible(!dataValid);

        if (fireEvents && oldValid != dataValid) {
            support.firePropertyChange(new PropertyChangeEvent(this, OptionsPanelController.PROP_VALID, oldValid, dataValid));
        }
    }

    private boolean isValidNumberValue(String text) {
        try {
            Integer.parseInt(text);
        } catch (NumberFormatException numberFormatException) {
            lblError.setText(NbBundle.getMessage(OdcsOptions.class, "LBL_INVALID_VALUE"));
            return false;
        }
        return true;
    }

    private void loadSettings() {
        final OdcsSettings settings = OdcsSettings.getInstance();
        boolean autoSync = settings.isAutoSync();
        cbSync.setSelected(autoSync);
        txtSync.setText(settings.getAutoSyncValue() + "");
        txtSync.setEnabled(autoSync);
    }
}
