/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */

package org.netbeans.modules.clearcase.ui.checkin;

import java.awt.BorderLayout;
import org.netbeans.modules.clearcase.ClearcaseModuleConfig;
import org.netbeans.modules.versioning.util.StringSelector;
import org.netbeans.modules.versioning.util.Utils;
import org.openide.util.NbBundle;

/**
 *
 * 
 */
class CheckinPanel extends javax.swing.JPanel {
    
    private CheckinTable checkinTable;

    /** Creates new form AddPanel */
    public CheckinPanel() {
        initComponents();
    }

    public void setCheckinTable(CheckinTable checkinTable) {
        this.checkinTable = checkinTable;
        jPanel1.setLayout(new BorderLayout());
        jPanel1.add(checkinTable.getComponent());
        revalidate();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        bRecentMessages = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        taMessage = new javax.swing.JTextArea();
        cbForceUnmodified = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        cbPreserveTime = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(CheckinPanel.class, "AddPanel.jLabel2.text")); // NOI18N

        jLabel1.setLabelFor(taMessage);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(CheckinPanel.class, "AddPanel.jLabel1.text")); // NOI18N

        bRecentMessages.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/clearcase/resources/icons/recent_messages.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(bRecentMessages, org.openide.util.NbBundle.getMessage(CheckinPanel.class, "AddPanel.bRecentMessages.text")); // NOI18N
        bRecentMessages.setToolTipText(org.openide.util.NbBundle.getMessage(CheckinPanel.class, "CheckinPanel.bRecentMessages.toolTipText")); // NOI18N
        bRecentMessages.setBorderPainted(false);
        bRecentMessages.setMargin(new java.awt.Insets(0, 0, 0, 0));
        bRecentMessages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRecentMessagesActionPerformed(evt);
            }
        });

        taMessage.setColumns(20);
        taMessage.setRows(4);
        taMessage.setToolTipText(org.openide.util.NbBundle.getMessage(CheckinPanel.class, "CheckinPanel.taMessage.toolTipText")); // NOI18N
        jScrollPane1.setViewportView(taMessage);

        org.openide.awt.Mnemonics.setLocalizedText(cbForceUnmodified, org.openide.util.NbBundle.getMessage(CheckinPanel.class, "AddPanel.cbSuppressCheckout.text")); // NOI18N
        cbForceUnmodified.setToolTipText(org.openide.util.NbBundle.getMessage(CheckinPanel.class, "CheckinPanel.cbForceUnmodified.toolTipText")); // NOI18N
        cbForceUnmodified.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbForceUnmodifiedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 707, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 182, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(cbPreserveTime, org.openide.util.NbBundle.getMessage(CheckinPanel.class, "CheckinPanel.cbPreserveTime.text")); // NOI18N
        cbPreserveTime.setToolTipText(org.openide.util.NbBundle.getMessage(CheckinPanel.class, "CheckinPanel.cbPreserveTime.toolTipText")); // NOI18N
        cbPreserveTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPreserveTimeActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(CheckinPanel.class, "CheckinPanel.jLabel3.text")); // NOI18N

        barPanel.setMaximumSize(new java.awt.Dimension(170, 10));
        barPanel.setPreferredSize(new java.awt.Dimension(170, 10));
        barPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout progressPanelLayout = new javax.swing.GroupLayout(progressPanel);
        progressPanel.setLayout(progressPanelLayout);
        progressPanelLayout.setHorizontalGroup(
            progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressPanelLayout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 132, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(barPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE))
        );
        progressPanelLayout.setVerticalGroup(
            progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 15, Short.MAX_VALUE)
            .addComponent(barPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 15, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 695, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 524, Short.MAX_VALUE)
                                .addComponent(bRecentMessages))
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cbPreserveTime, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbForceUnmodified, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(progressPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel1)
                    .addComponent(bRecentMessages))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbPreserveTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbForceUnmodified))
                    .addComponent(progressPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );
    }// </editor-fold>//GEN-END:initComponents

private void cbForceUnmodifiedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbForceUnmodifiedActionPerformed
    // ignore
}//GEN-LAST:event_cbForceUnmodifiedActionPerformed

private void bRecentMessagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRecentMessagesActionPerformed
    onBrowseRecentMessages();
}//GEN-LAST:event_bRecentMessagesActionPerformed

private void cbPreserveTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPreserveTimeActionPerformed
    // ignore
}//GEN-LAST:event_cbPreserveTimeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JButton bRecentMessages;
    final javax.swing.JPanel barPanel = new javax.swing.JPanel();
    javax.swing.JCheckBox cbForceUnmodified;
    javax.swing.JCheckBox cbPreserveTime;
    javax.swing.JLabel jLabel1;
    javax.swing.JLabel jLabel2;
    javax.swing.JLabel jLabel3;
    javax.swing.JPanel jPanel1;
    javax.swing.JScrollPane jScrollPane1;
    final javax.swing.JPanel progressPanel = new javax.swing.JPanel();
    javax.swing.JTextArea taMessage;
    // End of variables declaration//GEN-END:variables

    private void onBrowseRecentMessages() {
        String message = StringSelector.select(NbBundle.getMessage(CheckinPanel.class, "CTL_CheckinForm_RecentTitle"), 
                                               NbBundle.getMessage(CheckinPanel.class, "CTL_CheckinForm_RecentPrompt"), 
                                               Utils.getStringList(ClearcaseModuleConfig.getPreferences(), CheckinAction.RECENT_CHECKIN_MESSAGES));
        if (message != null) {
            taMessage.replaceSelection(message);
        }
    }
    
}
