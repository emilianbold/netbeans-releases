/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2008 Sun
 * Microsystems, Inc. All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */
package org.netbeans.modules.clearcase.ui.checkout;

import org.netbeans.modules.clearcase.ClearcaseModuleConfig;

/**
 * Uncheckout confirmation panel.
 *
 * 
 */
public class UncheckoutPanel extends javax.swing.JPanel {
    
    private static final String UNCHECKOUT_KEEP = "uncheckout.keep";
    private static final String UNCHECKOUT_RECURSIVE = "uncheckout.recursive";
    boolean onlyFolders;

    /** Creates new form UncheckoutPanel */
    public UncheckoutPanel() {
        onlyFolders = true;
        initComponents();
    }

    public void addNotify() {
        super.addNotify();
        cbKeep.setSelected(ClearcaseModuleConfig.getPreferences().getBoolean(UNCHECKOUT_KEEP, true));
        cbRecursively.setSelected(ClearcaseModuleConfig.getPreferences().getBoolean(UNCHECKOUT_RECURSIVE, true));
        enableKeepCheckBox();
    }

    public void removeNotify() {
        ClearcaseModuleConfig.getPreferences().putBoolean(UNCHECKOUT_KEEP, cbKeep.isSelected());
        ClearcaseModuleConfig.getPreferences().putBoolean(UNCHECKOUT_RECURSIVE, cbRecursively.isSelected());
        super.removeNotify();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cbKeep = new javax.swing.JCheckBox();

        setPreferredSize(new java.awt.Dimension(1136, 187));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(UncheckoutPanel.class, "UncheckoutPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(cbKeep, org.openide.util.NbBundle.getMessage(UncheckoutPanel.class, "UncheckoutPanel.cbKeep.text")); // NOI18N
        cbKeep.setToolTipText(org.openide.util.NbBundle.getMessage(UncheckoutPanel.class, "UncheckoutPanel.cbKeep.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(cbRecursively, org.openide.util.NbBundle.getMessage(UncheckoutPanel.class, "UncheckoutPanel.cbRecursively.text")); // NOI18N
        cbRecursively.setToolTipText(org.openide.util.NbBundle.getMessage(UncheckoutPanel.class, "UncheckoutPanel.cbRecursively.toolTipText")); // NOI18N
        cbRecursively.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRecursivelyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1124, Short.MAX_VALUE)
                    .addComponent(cbKeep, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1124, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbRecursively, javax.swing.GroupLayout.DEFAULT_SIZE, 1112, Short.MAX_VALUE)
                        .addGap(12, 12, 12))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbKeep)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbRecursively)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbRecursivelyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRecursivelyActionPerformed
        enableKeepCheckBox();
    }//GEN-LAST:event_cbRecursivelyActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JCheckBox cbKeep;
    final javax.swing.JCheckBox cbRecursively = new javax.swing.JCheckBox();
    javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    private void enableKeepCheckBox() {
        cbKeep.setEnabled(!onlyFolders || cbRecursively.isSelected());
}
}
