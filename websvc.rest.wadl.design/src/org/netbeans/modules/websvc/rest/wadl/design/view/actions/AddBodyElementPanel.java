/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
 * Microsystems, Inc. All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */
package org.netbeans.modules.websvc.rest.wadl.design.view.actions;

import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.ComboBoxModel;
import javax.swing.event.ListDataListener;
import org.netbeans.modules.websvc.rest.wadl.model.*;

/**
 *
 * 
 */
public class AddBodyElementPanel<T extends WadlComponent> extends javax.swing.JPanel {

    T parent;

    /** Creates new form NewJPanel */
    public AddBodyElementPanel(T parent) {
        initComponents();
        BodyElementTypesModel bodyElemTypesModel = new BodyElementTypesModel();
        cbBodyElementType.setModel(bodyElemTypesModel);
        cbBodyElementType.setSelectedItem(BodyElementType.REPRESENTATION.value());
    }

    public BodyElementType getBodyElementType() {
        return BodyElementType.fromValue((String) cbBodyElementType.getSelectedItem());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        returnLabel1 = new javax.swing.JLabel();
        cbBodyElementType = new javax.swing.JComboBox();

        org.openide.awt.Mnemonics.setLocalizedText(returnLabel1, org.openide.util.NbBundle.getMessage(AddBodyElementPanel.class, "LBL_MethodType")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(returnLabel1)
                .addGap(18, 18, 18)
                .addComponent(cbBodyElementType, 0, 436, Short.MAX_VALUE)
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(returnLabel1)
                    .addComponent(cbBodyElementType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
/*
private WSDLModel getWsdlModel() {
    return WSDLUtils.getWSDLModel(FileUtil.toFileObject(wsdlFile), true);
}*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cbBodyElementType;
    private javax.swing.JLabel returnLabel1;
    // End of variables declaration//GEN-END:variables
  
    
    private class BodyElementTypesModel implements ComboBoxModel {

        private transient List<String> methodTypes = new ArrayList<String>();
        private Object selectedItem;

        public BodyElementTypesModel() {
            for(BodyElementType m:BodyElementType.values()) {
                this.methodTypes.add(m.value());
            }
        }

        public void setSelectedItem(Object selectedItem) {
            this.selectedItem = selectedItem;
        }

        public Object getSelectedItem() {
            return selectedItem;
        }

        public int getSize() {
            return methodTypes.size();
        }

        public Object getElementAt(int index) {
            return methodTypes.get(index);
        }

        public void addListDataListener(ListDataListener l) {
        }

        public void removeListDataListener(ListDataListener l) {
        }
    }
    
    public static enum BodyElementType {

//        PARAM("Param"),
        REPRESENTATION("Representation"),
        FAULT("Fault"),;
        private final String value;

        BodyElementType(String v) {
            value = v;
        }

        public String value() {
            return value;
        }

        public static BodyElementType fromValue(String v) {
            for (BodyElementType c : BodyElementType.values()) {
                if (c.value.equals(v)) {
                    return c;
                }
            }
            throw new IllegalArgumentException(v);
        }

        public static String[] values(boolean toUpper) {
            Vector<String> v = new Vector<String>();
            for (BodyElementType c : BodyElementType.values()) {
                if (toUpper) {
                    v.add(c.value().toUpperCase());
                } else {
                    v.add(c.value().toLowerCase());
                }
            }
            return (String[]) v.toArray(new String[0]);
        }
    }
}
